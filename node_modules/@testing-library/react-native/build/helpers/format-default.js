"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.defaultMapProps = defaultMapProps;
var _reactNative = require("react-native");
const propsToDisplay = ['accessible', 'accessibilityElementsHidden', 'accessibilityHint', 'accessibilityLabel', 'accessibilityLabelledBy', 'accessibilityRole', 'accessibilityViewIsModal', 'aria-busy', 'aria-checked', 'aria-disabled', 'aria-expanded', 'aria-hidden', 'aria-label', 'aria-labelledby', 'aria-modal', 'aria-selected', 'aria-valuemax', 'aria-valuemin', 'aria-valuenow', 'aria-valuetext', 'defaultValue', 'importantForAccessibility', 'nativeID', 'placeholder', 'role', 'testID', 'title', 'value'];

/**
 * Preserve props that are helpful in diagnosing test failures, while stripping rest
 */
function defaultMapProps(props) {
  const result = {};
  const styles = _reactNative.StyleSheet.flatten(props.style);
  const styleToDisplay = extractStyle(styles);
  if (styleToDisplay !== undefined) {
    result.style = styleToDisplay;
  }
  const accessibilityState = removeUndefinedKeys(props.accessibilityState);
  if (accessibilityState !== undefined) {
    result.accessibilityState = accessibilityState;
  }
  const accessibilityValue = removeUndefinedKeys(props.accessibilityValue);
  if (accessibilityValue !== undefined) {
    result.accessibilityValue = accessibilityValue;
  }
  propsToDisplay.forEach(propName => {
    if (propName in props) {
      result[propName] = props[propName];
    }
  });
  return result;
}
function isObject(value) {
  return typeof value === 'object' && value !== null && !Array.isArray(value);
}
function removeUndefinedKeys(prop) {
  if (!isObject(prop)) {
    return prop;
  }
  let hasKeys = false;
  const result = {};
  Object.entries(prop).forEach(([key, value]) => {
    if (value !== undefined) {
      result[key] = value;
      hasKeys = true;
    }
  });
  return hasKeys ? result : undefined;
}
function extractStyle(style) {
  if (style == null) {
    return undefined;
  }
  const result = {};
  if (style.display === 'none') {
    result.display = 'none';
  }
  if (style.opacity === 0) {
    result.opacity = 0;
  }
  const hasAnyKeys = Object.keys(result).length > 0;
  return hasAnyKeys ? result : undefined;
}
//# sourceMappingURL=format-default.js.map